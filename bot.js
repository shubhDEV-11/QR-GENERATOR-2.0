import express from "express";
import bodyParser from "body-parser";
import fs from "fs";
import TelegramBot from "node-telegram-bot-api";
import QRCode from "qrcode";

const TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL; // e.g., https://your-app.onrender.com/bot
const PORT = process.env.PORT || 3000;
const DB_FILE = "users.json";

const app = express();
app.use(bodyParser.json());

// ===== Load DB =====
let users = {};
if (fs.existsSync(DB_FILE)) {
  users = JSON.parse(fs.readFileSync(DB_FILE));
}

function saveDB() {
  fs.writeFileSync(DB_FILE, JSON.stringify(users, null, 2));
}

// ===== Initialize Bot =====
const bot = new TelegramBot(TOKEN, { webHook: false }); // do NOT assign port

// Set webhook once
bot.setWebHook(WEBHOOK_URL).then(() => console.log("Webhook set successfully"));

// ===== Express Routes =====
app.get("/", (req, res) => {
  res.send(`
    <h1>ü§ñ BOT BY @SHUBHxAR</h1>
    <p>BOT USERNAME - @QR_GENERATOR_01_BOT</p>
    <p>Use this bot on Telegram to generate UPI QR Codes.</p>
  `);
});

// Telegram webhook endpoint
app.post("/bot", (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// ===== Helper =====
function initUser(chatId) {
  if (!users[chatId]) {
    users[chatId] = { upiIds: [], selectedUpi: null };
    saveDB();
  }
}

// ===== Bot Logic =====
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  initUser(chatId);

  const username = msg.from.username ? `@${msg.from.username}` : msg.from.first_name || "User";
  bot.sendMessage(
    chatId,
    `üëã Welcome ${username}!\n\nüîπ This bot generates **UPI QR Codes**.\n\nüìå Features:\n- Save multiple UPI IDs\n- Generate QR instantly\n\nüë®‚Äçüíª Developer: @SHUBHxAR`,
    {
      reply_markup: { keyboard: [["‚ö° Generate QR Code"]], resize_keyboard: true },
      parse_mode: "Markdown",
    }
  );
});

bot.onText(/\/set (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  initUser(chatId);

  const upiId = match[1].trim();
  if (!users[chatId].upiIds.includes(upiId)) {
    users[chatId].upiIds.push(upiId);
    saveDB();
    bot.sendMessage(chatId, `‚úÖ UPI ID saved: \`${upiId}\``, { parse_mode: "Markdown" });
  } else {
    bot.sendMessage(chatId, `‚ö†Ô∏è UPI ID already exists: \`${upiId}\``, { parse_mode: "Markdown" });
  }
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text || "";
  initUser(chatId);

  // Generate QR
  if (text === "‚ö° Generate QR Code") {
    if (users[chatId].upiIds.length === 0) {
      bot.sendMessage(chatId, "‚ùå You haven‚Äôt set any UPI ID yet.\nUse `/set <UPI_ID>` to add one.");
      return;
    }
    const inline = users[chatId].upiIds.map((id) => [{ text: id, callback_data: `upi_${id}` }]);
    bot.sendMessage(chatId, "üîΩ Select a UPI ID:", { reply_markup: { inline_keyboard: inline } });
    return;
  }

  // Amount input
  if (users[chatId].selectedUpi) {
    if (text.startsWith("/")) return;

    const amountNum = parseFloat(text.replace(/,/g, "").trim());
    if (isNaN(amountNum)) {
      bot.sendMessage(chatId, "‚ö†Ô∏è Enter a valid numeric amount (e.g. 250 or 199.50).");
      return;
    }

    const upiId = users[chatId].selectedUpi;
    const username = msg.from.username ? `@${msg.from.username}` : msg.from.first_name || "User";
    const upiLink = `upi://pay?pa=${encodeURIComponent(upiId)}&pn=${encodeURIComponent(
      username
    )}&am=${encodeURIComponent(amountNum.toString())}&cu=INR`;

    try {
      const qrBuffer = await QRCode.toBuffer(upiLink);
      await bot.sendPhoto(chatId, qrBuffer, {
        caption: `‚úÖ QR Code generated by ${username}\n\nüí≥ UPI: \`${upiId}\`\nüí∞ Amount: ‚Çπ${amountNum}`,
        parse_mode: "Markdown",
      });
    } catch (err) {
      console.error("QR error:", err);
      bot.sendMessage(chatId, "‚ùå Error generating QR Code. Try again.");
    }

    users[chatId].selectedUpi = null;
    saveDB();
  }
});

// Inline UPI selection
bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  initUser(chatId);

  const upiId = query.data.replace("upi_", "");
  users[chatId].selectedUpi = upiId;
  saveDB();

  bot.answerCallbackQuery(query.id);
  bot.sendMessage(chatId, `üí∞ Enter the amount for QR code for ${upiId} (numbers only):`);
});

// ===== Start Express Server =====
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
